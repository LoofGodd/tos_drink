generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  username          String              @unique
  name              String?
  role              String              @default("user")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  password          Password?
  sessions          Session[]
  userBoughtProduct UserBoughtProduct[]
  carts             cart[]
  image             userImage?
}

model Session {
  id        String   @id @default(cuid())
  expired   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                  String        @id @default(cuid())
  name                String        @unique
  feature             Boolean       @default(false)
  description         String?
  price               Int           @default(0)
  createdAt           DateTime      @default(now())
  image               ProductImage?
  productPerCheckouts cart[]
}

model ProductImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model cart {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  status    String   @default("show")
  sugar     Int      @default(100)
  kuch      String   @default("none")
  ice       String   @default("general")
  size      String   @default("regular")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, status, sugar, kuch, ice, size], name: "cafe_tmey")
}

model UserBoughtProduct {
  id                  String   @id @default(cuid())
  userId              String
  productBoughtIdList String
  status              String
  totalPrice          Int      @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model userImage {
  id          String   @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  charSet   String
  expiresAt DateTime?

  @@unique([type, target])
}
